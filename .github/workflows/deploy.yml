name: Deploy API on push to main

permissions:
  contents: write

on:
  push:
    branches:
      - main

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      GOOGLE_PROJECT: ${{ secrets.GCP_PROJECT_ID }}
      GOOGLE_REGION: ${{ secrets.GOOGLE_REGION }}
      GOOGLE_ZONE: ${{ secrets.GOOGLE_ZONE }}

      TF_VAR_project: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_region: ${{ secrets.GOOGLE_REGION }}
      TF_VAR_zone: ${{ secrets.GOOGLE_ZONE }}

    steps:
    - name: Checkout repo
      uses: actions/checkout@v3

    - name: Set GH_PAT environment variable
      run: echo "GH_PAT=${{ secrets.GITHUB_TOKEN }}" >> $GITHUB_ENV

    - name: Restore Terraform state from cache
      uses: actions/cache@v3
      with:
        path: infra/terraform.tfstate
        key: terraform-state-${{ github.ref }} 

    - name: Set up Google Cloud credentials
      uses: google-github-actions/auth@v2
      with:
        credentials_json: ${{ secrets.GCP_SA_KEY }}

    - name: Créer le fichier credentials.json dans infra/
      run: |
        mkdir -p infra
        echo '${{ secrets.GCP_SA_KEY }}' > infra/credentials.json

    - name: Install Terraform
      uses: hashicorp/setup-terraform@v3

    - name: Terraform init
      working-directory: ./infra
      run: terraform init

    - name: Terraform apply
      working-directory: ./infra
      run: terraform apply -auto-approve

    - name: Save Terraform state to cache
      uses: actions/cache@v3
      with:
        path: infra/terraform.tfstate
        key: terraform-state-${{ github.ref }}

    - name: Get VM IP from Terraform output
      id: get_ip
      working-directory: ./infra
      run: |
        IP=$(terraform output -raw instance_ip || echo "")
        if [ -n "$IP" ]; then
          echo "IP=$IP" >> $GITHUB_ENV
        else
          echo "No instance_ip output found"
          exit 1
        fi

    - name: Set up SSH for Ansible
      uses: webfactory/ssh-agent@v0.9.0
      with:
        ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

    # - name: Add GCP VM to known_hosts
    #   run: ssh-keyscan -H $IP >> ~/.ssh/known_hosts

    # - name: Install Ansible
    #   run: |
    #     sudo apt update
    #     sudo apt install -y ansible python3-pip
    #     pip3 install --user ansible

    # - name: Create Ansible inventory file
    #   run: |
    #     echo "[api]" > inventory.ini
    #     echo "$IP ansible_user=debian ansible_ssh_private_key_file=~/.ssh/id_rsa" >> inventory.ini

    # - name: Run Ansible playbook
    #   run: ansible-playbook -i inventory.ini ansible/deploy.yml

    - name: Set up Git identity
      run: |
        git config --global user.email "ci-bot@example.com"
        git config --global user.name "CI Bot"

    - name: Run release script and push
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git
        chmod +x ./release.sh
        ./release.sh
        git push origin main || echo "Aucun changement à pousser"
        git push origin --tags || echo "Aucun tag à pousser"